class Solution:
    def twoSum(self, nums, target):
        ## Well no one will ever ask this but whatever
        ## Gotta find the two numbers that add up to the target
        ## The array is NOT sorted and we cant sort it for this question
        ## Now obviously the two pointers thing works here
        ## However, that is O(n^2) or O(nlogn) worst case and we can do this in O(n)
        ## set lookup is an O(1) operation 
        ## dict lookup is also an O(1) operation
        ## The dict value will be the number and its value will be the index
        hashdict = {}
        for i in range(len(nums)):
            diff = target - nums[i]
            if diff in hashdict: ## Can I do this or do I need to do keys? Yes you can
                return [hashdict[diff],i]
            else:
                hashdict[nums[i]] = i
        ## Normally I did this with enumerate but we dont really need it
        ## This is an O(n) solution
    
    def twoSum2(self, nums, target):
        # This actually sends back the two numbers that add up to that
        # In this case we don't need a dict, we just need an array
        hashset = set()

        for i in range(len(nums)):
            diff = target - nums[i]
            if diff in hashset:
                return [diff,nums[i]]
            else:
                hashset.add(nums[i])

    ## This twosum is actually for 3 sum but its here anyway lol
    def twoSum3(self, nums, index,retarray):
        hashset = set()
        for i in range(len(nums)):
            if i != index:
                diff = (nums[index] + nums[i])*-1
                if diff in hashset:
                    retarray.append([diff,nums[i],nums[index]])
                else:
                    hashset.add(nums[i])
        return retarray

    ## Okay for this one we are given an array that is already sorted
    ## So we can solve it much more easily
    ## It will still be O(n) I guess but with no memory since we will use pointers
    ## We only have to iterate once and we dont need any extra memory
    def twoSum4(self, nums, target,arr):
        l = 0
        r = len(nums)-1
        while l < r:
            if nums[l]+nums[r] == target:
                arr.append([l,r])
                l += 1
            if nums[l]+nums[r] > target:
                r -= 1
            if nums[l]+nums[r] < target:
                l += 1
        return arr
    
    def twosum5(self, nums, target):
        for i in range(len(nums)):
            for j in range(i,len(nums)):
                print(i,j)
                if nums[i] + nums[j] == target:
                    return [i,j]


s = Solution()
arr1 = [2,5,6,1,4,-3,-1]


print(s.twosum5(arr1,5))

arr2 = [1,2,3,4,5,6,7,8]
arr3 = []



